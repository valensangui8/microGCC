/* Function prototypes */
int calculateFactorial(int number);
int calculateCombination(int n, int k);
int pascalTriangle(int rows);

int main() {
    int n = 7;
    int factorial_result;
    
    factorial_result = calculateFactorial(n);
    
    int k = 3;
    int combination_result;
    combination_result = calculateCombination(n, k);
    
    /* Call function to print Pascal's triangle */
    return printPascalTriangle(n);
}

/* Function to calculate factorial of a number */
int calculateFactorial(int number) {
    int result = 1;
    
    int i;
    for (i = 2; i <= number; i = i + 1) {
        result = result * i;
    }
    
    return result;
}

/* Function to calculate combinations (n choose k) */
/*
int calculateCombination(int n, int k) {
    return calculateFactorial(n) / (calculateFactorial(k) * calculateFactorial(n - k));
}
*/


int pascalTriangle(int rows) {
    int triangle[400];
    
    int i;
    
    for (i = 0; i < rows; i = i + 1) {
        int j;
        for (j = 0; j <= i; j = j + 1){
            triangle[20 * i + j] = calculateCombination(i, j);
        }
    }
    

    return 0;
}
